#include<iostream>
#include<cmath>
#include<vector>
#include<fstream>
#include"lib/Eigen/Dense"
#include"lib/Eigen/Core"
#include"lib/Eigen/SVD"

#define ABR_H
#define FEATURE_DEFENDED


using namespace Eigen;
/*****************************************************************************\
***                                                                        ***\   
***                      Recognize Alphaberts Related                      ***\
***                    by Kanch at http://akakanch.com                     ***\
***                         kanchisme@gmail.com                            ***\
***                                                                        ***\
***                                                                        ***\
******************************************************************************/
/* Basic types */
typedef uint8_t BASE;
typedef BASE*** MATRIX;
typedef BASE** ROW;
typedef BASE** COLUMN;
typedef BASE* PIXEL;
typedef BASE* ALPHABERTS;
typedef BASE CHANNEL;
typedef MATRIX  IMAGE;
typedef std::vector<int> LIST;

typedef ROW IMAGE2D;
typedef PIXEL ROW2D;

/* struct stores image basic information */
struct ImageData{
    int width;
    int height;
    int channel;
};

/* struct stores image matrix and its basic information */
struct ImagePack{
    IMAGE image;
    ImageData properties;
};
struct ImagePack2D{
    IMAGE2D image;
    ImageData properties;
};

//#define FEATURE_DEFENDED
/* structures to stores Features */
struct Features{
    std::vector<int> x_sum;
    std::vector<int> y_sum;
    std::vector<int> line_sum;
    int width;
    int height;
    double wh_ratio;
    std::string label;
};

typedef std::vector<ImagePack> LISTIMAGEPACK;
typedef std::vector<ImagePack2D> LISTIMAGEPACK2D;
typedef std::vector<LISTIMAGEPACK> DLISTIMAGEPACK;

template <typename T>
void alog(T a){
    std::cout << ">>>"<<a<<std::endl;
}

std::vector<std::string> split_string(const std::string& data,const std::string&sym){
    std::vector<std::string> result;
    int s=0;
    std::string subresult = "";
    for(int i=0;i<data.length();i++){
        if( data[i] == sym[0]  ){
            bool found = true;
            for(int j=1;j<sym.length();j++){
                if( sym[j] != data[i+j] ){
                    found = false;
                    break;
                }
            }
            if(found){
                subresult = data.substr(s,i-s);
                result.push_back(subresult);
                i += sym.length();
                s = i;
            }
        }
    }
    if(s != data.length()){
        result.push_back( data.substr(s,data.length()-s) );
    }
    return result;
}


/* converting string to features,s = x1,x2@y1,y2@scale@height,width@label */
Features string2feature(std::string s){
    Features f;
    // get x_sum_str,y_sum_str,ration_str,height_str,width_str,label
    std::vector<std::string> dataframe = split_string(s,"@"); 
    //parse x_sum
    std::vector<std::string> values = split_string(dataframe[0],",");
    std::vector<int> xsum;
    for(int i=0;i<values.size();i++){
        xsum.push_back(atoi(values[i].c_str()));
    }
    //parse y_sum
    values = split_string(dataframe[1],",");
    std::vector<int> ysum;
    for(int i=0;i<values.size();i++){
        ysum.push_back(atoi(values[i].c_str()));
    }
    f.x_sum = xsum;
    f.y_sum = ysum;
    //parse ratio
    f.wh_ratio = atof(dataframe[2].c_str());
    // parse width and height
    f.height = atoi(dataframe[3].c_str());
    f.width = atoi(dataframe[4].c_str());
    f.label = dataframe[5];

    return f;
}

const std::vector<Features> parseTemplateData(std::string data){
    std::vector<Features> templatelist;
    std::vector<std::string> datalist = split_string(data,"#");
    for(int i=0;i<datalist.size();i++){
        templatelist.push_back( string2feature(datalist[i]) );
    }
    return templatelist;
}

void test_eigen(){
    MatrixXd C;
    C.setRandom(27,18);
    JacobiSVD<MatrixXd> svd( C, ComputeThinU | ComputeThinV);
    MatrixXd Cp = svd.matrixU() * svd.singularValues().asDiagonal() * svd.matrixV().transpose();
    MatrixXd diff = Cp - C;
    std::cout << "diff:\n" << diff.array().abs().sum() << "\n";
    std::cout << "matrix:\n" << C  << "\n";
    std::cout << "SingluarValues:\n" << svd.singularValues().data() << "\n";
}

/* cast native matrix MATRIX to Eigen Matrix type */
MatrixXd  to_EigenMatrixXd(MATRIX mat,const int width,const int height){
    MatrixXd result(height,width);
    for(int i=0;i<height;i++){
        for(int j=0;j<width;j++){
            result(i,j) = mat[i][j][0];
        }
    }
    return result;
}

/* compute similarity */
const double similarity(const ImagePack img,const Features temp){
    return 0.0;
}

/* predict which alphaberts it is  */
std::string predictAlphberts(ImagePack img,const std::vector<Features> &templatedata){
    //delete empty line
    img.image = delteEmptyline(img.image,img.properties);

    // loop computing cos with the template data
    double maxv = 0;
    std::string current="*";
    for(int i=0;i<templatedata.size();i++){
        double x = similarity(img,templatedata[i]);
        if(x > maxv){
            maxv =x;
            current = templatedata[i].label;
        }
    }
    
    // return data
    return current;
}